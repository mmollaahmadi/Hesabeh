{
  "_from": "react-dropzone-component",
  "_id": "react-dropzone-component@3.2.0",
  "_inBundle": false,
  "_integrity": "sha512-QwopN2GgzHCKcMyJvBZuYCeqnU9F/Uiq1hD94/JmFdLmkzU1rw7SbNjLNUad864YoAEvcx93uHUItv0NUwlTxw==",
  "_location": "/react-dropzone-component",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "react-dropzone-component",
    "fetchSpec": "latest",
    "name": "react-dropzone-component",
    "raw": "react-dropzone-component",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-dropzone-component/-/react-dropzone-component-3.2.0.tgz",
  "_shasum": "8ad4cdce342084fb87302ddec6651caa49d8b103",
  "_shrinkwrap": null,
  "_spec": "react-dropzone-component",
  "_where": "/home/mohammad/Desktop/hesabeh",
  "bugs": {
    "url": "https://github.com/felixrieseberg/React-Dropzone/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "dropzone": "^5.4.0",
    "extend": "^3.0.1"
  },
  "deprecated": false,
  "description": "A Dropzone Component for ReactJS",
  "devDependencies": {
    "@types/dropzone": "5.0.2",
    "babel-core": "^6.26.0",
    "babel-jest": "^22.4.3",
    "babel-loader": "^7.1.4",
    "babel-preset-es2015": "^6.24.1",
    "babel-preset-react": "^6.24.1",
    "enzyme": "^3.3.0",
    "enzyme-adapter-react-16": "^1.1.1",
    "jest": "^22.4.3",
    "standard": "^11.0.1",
    "uglifyjs-webpack-plugin": "^1.2.4",
    "webpack": "^3.10.0"
  },
  "homepage": "https://github.com/felixrieseberg/React-Dropzone#readme",
  "jest": {
    "modulePathIgnorePatterns": [
      "<rootDir>/src/__tests__/setup.js"
    ],
    "setupFiles": [
      "<rootDir>/src/__tests__/setup.js"
    ],
    "transform": {
      "^.+\\.js?$": "babel-jest"
    },
    "unmockedModulePathPatterns": [
      "<rootDir>/node_modules/*"
    ]
  },
  "license": "MIT",
  "main": "dist/react-dropzone.js",
  "maintainers": [
    {
      "name": "Felix Rieseberg",
      "email": "felix@felixrieseberg.com",
      "url": "http://www.felixrieseberg.com"
    },
    {
      "name": "Erik Schlegel",
      "email": "erik.schlegel@gmail.com",
      "url": "erikschlegel.com"
    }
  ],
  "name": "react-dropzone-component",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": ">15.0.1",
    "react-dom": ">15.0.1"
  },
  "readme": "## Dropzone.js Component for React\n[![Build Status](https://travis-ci.org/felixrieseberg/React-Dropzone-Component.svg?branch=master)](https://travis-ci.org/felixrieseberg/React-Dropzone-Component) [![Dependency Status](https://david-dm.org/felixrieseberg/react-dropzone-component.svg)](https://david-dm.org/felixrieseberg/react-dropzone-component) [![npm version](https://badge.fury.io/js/react-dropzone-component.svg)](https://badge.fury.io/js/react-dropzone-component) ![Downloads](https://img.shields.io/npm/dm/react-dropzone-component.svg)\n\nA Dropzone component for ReactJS, allowing users to \"drag and drop\" files into an upload area. The component uses the battle-tested [Dropzone.js](http://www.dropzonejs.com/) to provide a cross-browser-compatible upload component.\n\nYou [can see a demo of the uploader with minimal configuration here](http://reactdropzone.azurewebsites.net/example).\n\n<div align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/felixrieseberg/React-Dropzone/master/.dropzone.gif\" alt=\"Screen GIF\" />\n</div>\n\n * [Simple Usage Example](#usage)\n   * [Accessing the Dropzone.js object](#accessing-the-dropzone-object)\n   * [Usage without automatic posting](#usage-without-automatic-posting)\n   * [Custom Preview Template](#custom-preview-template)\n   * [Custom Post Parameters](#custom-post-parameters)\n   * [Updating the Component's Properties](#updating-the-components-properties)\n * [Callbacks](#callbacks)\n * [Server Example](#server-example)\n\n## Usage\nThe component is initialized with a configuration object. Optional are a list of event handlers and a configuration object for dropzone.js.\n\nIf you are using one of the many module solutions, you can simply install and require this component like shown below. The package's main entry point is `lib/dropzone.js`, which gives you all the dropzone components. If you're rolling with ES6/ES2015, feel free to use `src/dropzone.js`. If you don't want any trouble at all, just add `dist/dropzone.min.js` as a script to your app and use `<DropzoneComponent />`.\n\n> :warning: Ensure that React and ReactDOM are global variables, so that they can be reached on `window.React` or `globa.React`. Many fancy boilerplates are overly fancy and somehow remove those variables.\n>\n> If you are using a fancy boilerplate, you might want to require the lib directly, by using `import DropzoneComponent from 'react-dropzone-component/lib/react-dropzone'` or `require('react-dropzone-component/lib/react-dropzone')`.\n\nPlease ensure that you also include two required CSS files: `node_modules/react-dropzone-component/styles/filepicker.css` and `node_modules/dropzone/dist/min/dropzone.min.css`. There are currently a bunch of good ways to combine and process CSS in React, so I'll leave it to you to choose whatever method is best for you - the component does not automatically load CSS.\n\n> To use this component without React-DOM, use version `^0.6` - from `0.7` on, we need it.\n\n```\nnpm install react-dropzone-component\n```\n\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport DropzoneComponent from 'react-dropzone-component';\n\nvar componentConfig = {\n    iconFiletypes: ['.jpg', '.png', '.gif'],\n    showFiletypeIcon: true,\n    postUrl: '/uploadHandler'\n};\n\nReactDOM.render(\n    <DropzoneComponent config={componentConfig}\n                       eventHandlers={eventHandlers}\n                       djsConfig={djsConfig} />,\n    document.getElementById('content')\n);\n```\n\nThe configuration allows you to disable the display of CSS file type icons and to set the URL to which uploads should be posted.\n\n##### Accessing the Dropzone Object\nThere are a bunch of operations that might require accessing the dropzone object, especially when wanting to call [dropzone methods](http://www.dropzonejs.com/#dropzone-methods).\n\nTo get said object, use the `init` event, whose callback will receive a reference to the dropzone object as a parameter.\n\n```js\nvar myDropzone;\n\nfunction initCallback (dropzone) {\n    myDropzone = dropzone;\n}\n\nfunction removeFile () {\n    if (myDropzone) {\n        myDropzone.removeFile();\n    }\n}\n```\n\n##### Usage Without Automatic Posting\nIf you want to use this component without posting automatically to a URL but instead do the posting yourself, then you can just fill the `postUrl` option with a meaningless string and handle the displaying of progress by yourself using the provided event handlers. To see this in action, check out the `examples`!\n\n```js\nvar componentConfig = { postUrl: 'no-url' };\nvar djsConfig = { autoProcessQueue: false }\nvar eventHandlers = { addedfile: (file) => console.log(file) }\n\nReactDOM.render(\n    <DropzoneComponent config={componentConfig}\n                       eventHandlers={eventHandlers}\n                       djsConfig={djsConfig} />,\n    document.getElementById('content')\n);\n```\n\n##### Custom Preview Template\nThe djsconfig property is compatible with all of the options in the official [DropzoneJS documentation](http://www.dropzonejs.com/#layout). Updating the preview template can be done as follows:\n\n```js\nvar ReactDOMServer = require('react-dom/server');\n\nvar djsConfig = {\n  previewTemplate: ReactDOMServer.renderToStaticMarkup(\n    <div className=\"dz-preview dz-file-preview\">\n      <div className=\"dz-details\">\n        <div className=\"dz-filename\"><span data-dz-name=\"true\"></span></div>\n        <img data-dz-thumbnail=\"true\" />\n      </div>\n      <div className=\"dz-progress\"><span className=\"dz-upload\" data-dz-uploadprogress=\"true\"></span></div>\n      <div className=\"dz-success-mark\"><span>✔</span></div>\n      <div className=\"dz-error-mark\"><span>✘</span></div>\n      <div className=\"dz-error-message\"><span data-dz-errormessage=\"true\"></span></div>\n    </div>\n  )\n}\n```\n\n##### Custom Post Parameters\nTo add custom parameters to your request, add a `params` property to your Dropzone.js configuration object.\n\n```js\nvar djsConfig = {\n    addRemoveLinks: true,\n    params: {\n        myParameter: \"I'm a parameter!\"\n    }\n};\n\nvar componentConfig = {\n    postUrl: '/uploadHandler'\n};\n\nReactDOM.render(<DropzoneComponent config={componentConfig} djsConfig={djsConfig} />, document.getElementById('content'));\n```\n\n### Custom Dropzone Area\n\nIn case you need to customize the dropzone area, you may pass a jQuery compatible selector in the config object.\n\n```js\nvar componentConfig = {\n    postUrl: '/uploadHandler',\n    dropzoneSelector: 'body',\n};\n\nReactDOM.render(\n  <DropzoneComponent config={componentConfig} />,\n  document.getElementById('content'),\n);\n```\n\nThe code above will use the entire page `body` as the dropzone area.\n\n### Callbacks\nCallbacks can be provided in an object literal.\n\n```js\nvar eventHandlers = {\n    // This one receives the dropzone object as the first parameter\n    // and can be used to additional work with the dropzone.js\n    // object\n    init: null,\n    // All of these receive the event as first parameter:\n    drop: callbackArray,\n    dragstart: null,\n    dragend: null,\n    dragenter: null,\n    dragover: null,\n    dragleave: null,\n    // All of these receive the file as first parameter:\n    addedfile: simpleCallBack,\n    removedfile: null,\n    thumbnail: null,\n    error: null,\n    processing: null,\n    uploadprogress: null,\n    sending: null,\n    success: null,\n    complete: null,\n    canceled: null,\n    maxfilesreached: null,\n    maxfilesexceeded: null,\n    // All of these receive a list of files as first parameter\n    // and are only called if the uploadMultiple option\n    // in djsConfig is true:\n    processingmultiple: null,\n    sendingmultiple: null,\n    successmultiple: null,\n    completemultiple: null,\n    canceledmultiple: null,\n    // Special Events\n    totaluploadprogress: null,\n    reset: null,\n    queuecomplete: null\n}\n```\n\nTo provide a single callback, simply override one of these events with your function reference. If you want to provide multiple callbacks, simply provide an array with your function references.\n\n```js\nvar callbackArray = [\n    function () {\n        console.log('Look Ma, I\\'m a callback in an array!');\n    },\n    function () {\n        console.log('Wooooow!');\n    }\n];\n\nvar simpleCallBack = function () {\n    console.log('I\\'m a simple callback');\n};\n```\n\n#### Updating the Component's Properties\nThis React Component is a wrapper around Dropzone.js - meaning that Dropzone.js is not aware of the React component life cycle. When you update the component's properties, we will use a copy of jQuery's `extend` method ([see documentation](https://api.jquery.com/jquery.extend/)) to merge new options into the Dropzone's properties object.\n\nIf you want to fundamentally change things about your dropzone, we recommend that you either modify the Dropzone object directly or destroy and recreate the component.\n\n## Server Example\nThis component comes with a small server example. To try it out, simply run `npm install` and `npm start` from the `example` folder. Visit `http://localhost:8000/example/` to see the uploads working.\n\nTo check out the (super small) source code for this simple upload-accepting server, check out `example/src-server/` and `example/server.js`. **The component works with any server infrastructure, though!**\n\n## License\nMIT. For details, please consult `README.md`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/felixrieseberg/React-Dropzone.git"
  },
  "scripts": {
    "build": "webpack -p",
    "prepare": "npm run build",
    "test": "standard ./src && jest"
  },
  "standalone": "React-Dropzone",
  "types": "typescript/types.d.ts",
  "version": "3.2.0"
}
