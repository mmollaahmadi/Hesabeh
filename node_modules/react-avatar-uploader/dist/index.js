"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _axios = require("axios");

var _axios2 = _interopRequireDefault(_axios);

var _Avatar = require("./Avatar");

var _Avatar2 = _interopRequireDefault(_Avatar);

var _upload_icon = require("./static/assets/upload_icon.png");

var _upload_icon2 = _interopRequireDefault(_upload_icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AvatarUploader = function (_Component) {
    _inherits(AvatarUploader, _Component);

    function AvatarUploader(props) {
        _classCallCheck(this, AvatarUploader);

        var _this = _possibleConstructorReturn(this, (AvatarUploader.__proto__ || Object.getPrototypeOf(AvatarUploader)).call(this, props));

        _this.state = {
            currentImage: null,
            loading: false
        };

        _this.uploadImage = _this.uploadImage.bind(_this);
        _this.onImageChange = _this.onImageChange.bind(_this);
        return _this;
    }

    _createClass(AvatarUploader, [{
        key: "uploadImage",
        value: function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(avatar) {
                var _props, uploadURL, onStart, onProgress, onFinished, name, customHeaders, withCredentials, avatarForm, res;

                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _props = this.props, uploadURL = _props.uploadURL, onStart = _props.onStart, onProgress = _props.onProgress, onFinished = _props.onFinished, name = _props.name, customHeaders = _props.customHeaders, withCredentials = _props.withCredentials;

                                if (!uploadURL) {
                                    _context.next = 17;
                                    break;
                                }

                                _context.prev = 2;

                                if (onStart && typeof onStart === 'function') {
                                    onStart();
                                }
                                this.setState({ loading: true });
                                avatarForm = new FormData();


                                avatarForm.append(name, avatar, avatar.name);

                                _context.next = 9;
                                return _axios2.default.post(uploadURL, avatarForm, {
                                    withCredentials: withCredentials,
                                    headers: customHeaders ? customHeaders : null,
                                    onUploadProgress: function onUploadProgress(progressEvent) {
                                        var percentCompleted = Math.floor(progressEvent.loaded * 100 / progressEvent.total);
                                        if (onProgress && typeof onProgress === 'function') {
                                            onProgress(percentCompleted);
                                        }
                                    }
                                });

                            case 9:
                                res = _context.sent;


                                if (res.status && res.status === 200) {
                                    this.setState({ loading: false });

                                    if (onFinished && typeof onFinished === 'function') {
                                        onFinished(false, res);
                                    }
                                }

                                _context.next = 17;
                                break;

                            case 13:
                                _context.prev = 13;
                                _context.t0 = _context["catch"](2);

                                this.setState({ loading: false });
                                if (onFinished && typeof onFinished === 'function') {
                                    onFinished(_context.t0);
                                }

                            case 17:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this, [[2, 13]]);
            }));

            function uploadImage(_x) {
                return _ref.apply(this, arguments);
            }

            return uploadImage;
        }()
    }, {
        key: "onImageChange",
        value: function onImageChange(e) {
            var _this2 = this;

            var imageToUpload = e.target.files[0];
            var reader = new FileReader();
            reader.onload = function (avatar) {
                return _this2.setState({ currentImage: avatar.target.result });
            };
            reader.readAsDataURL(imageToUpload);

            this.uploadImage(imageToUpload);
        }
    }, {
        key: "render",
        value: function render() {
            var _props2 = this.props,
                disabled = _props2.disabled,
                size = _props2.size,
                defaultImg = _props2.defaultImg,
                fileType = _props2.fileType,
                placeholder = _props2.placeholder;
            var currentImage = this.state.currentImage;

            return _react2.default.createElement(
                _Avatar2.default,
                { placeholder: placeholder, size: size },
                currentImage || defaultImg ? _react2.default.createElement(_Avatar2.default.Preview, { src: currentImage || defaultImg }) : null,
                _react2.default.createElement(_Avatar2.default.Uploader, {
                    fileType: fileType,
                    onChange: this.onImageChange,
                    disabled: disabled })
            );
        }
    }]);

    return AvatarUploader;
}(_react.Component);

exports.default = AvatarUploader;


AvatarUploader.propTypes = {
    uploadURL: _propTypes2.default.string.isRequired,
    onFinished: _propTypes2.default.func,
    onStart: _propTypes2.default.func,
    onProgress: _propTypes2.default.func,
    placeholder: _propTypes2.default.string,
    withCredentials: _propTypes2.default.bool,
    customHeaders: _propTypes2.default.object,
    disabled: _propTypes2.default.bool,
    fileType: _propTypes2.default.string,
    size: _propTypes2.default.number,
    defaultImg: _propTypes2.default.string,
    name: _propTypes2.default.string.isRequired
};

AvatarUploader.defaultProps = {
    disabled: false,
    placeholder: _upload_icon2.default,
    withCredentials: false,
    fileType: "image/jpeg",
    size: 150
};