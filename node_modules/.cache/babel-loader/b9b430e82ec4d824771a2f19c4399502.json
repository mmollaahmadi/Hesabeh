{"ast":null,"code":"var _jsxFileName = \"/home/mohammad/Desktop/Hesabeh/src/components/common/selection-labels/selection-labels.js\";\nimport React from 'react';\nimport { Badge, Col, Row } from \"reactstrap\";\nimport './selection-labels.css';\nimport ScrollableHorizontal from \"../../my-components/scrollable-horizontal/scrollable-horizontal\";\nexport default class SelectionLabels extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedLabelsIDS: []\n    };\n    this.selectLabel = this.selectLabel.bind(this);\n    this.deselectLabel = this.deselectLabel.bind(this);\n    this.handleClickLabel = this.handleClickLabel.bind(this);\n  }\n\n  handleClickLabel(id) {\n    if (this.state.selectedLabelsIDS.includes(id)) this.deselectLabel(id);else this.selectLabel(id);\n  }\n\n  selectLabel(id) {\n    let isSelectedBefore = false;\n\n    if (this.state.selectedLabelsIDS) {\n      this.state.selectedLabelsIDS.forEach(labelID => {\n        if (labelID === id) isSelectedBefore = true;\n      });\n\n      if (!isSelectedBefore) {\n        let labels = this.state.selectedLabelsIDS;\n        labels.push(id);\n        this.props.setLabels(labels);\n        this.setState({\n          selectedLabelsIDS: labels\n        });\n      }\n    }\n  }\n\n  deselectLabel(id) {\n    let labels = this.state.selectedLabelsIDS.filter(function (label) {\n      return label !== id;\n    });\n    this.props.setLabels(labels);\n    this.setState({\n      selectedLabelsIDS: labels\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.selectedLabels !== prevProps.selectedLabels) {\n      let _labels = [];\n      this.props.selectedLabels.forEach(label => {\n        _labels.push(label);\n      });\n      this.setState({\n        selectedLabelsIDS: _labels\n      });\n    }\n  }\n\n  render() {\n    let labels = [];\n\n    if (this.props.labels) {\n      this.props.labels.forEach(label => {\n        labels.push(React.createElement(Badge, {\n          style: this.state.selectedLabelsIDS.includes(label.id) ? {\n            borderColor: 'transparent',\n            background: \"rgba(\".concat(label.color.r, \",\").concat(label.color.g, \",\").concat(label.color.b, \",\").concat(label.color.a, \")\"),\n            color: \"\".concat(label.isTextColorDark ? 'rgb(0,0,0,1)' : 'rgb(255,255,255,1)')\n          } : {},\n          color: \"primary\",\n          className: \"selection-labels-label align-self-center\",\n          onClick: () => this.handleClickLabel(label.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, label.name));\n      });\n    }\n\n    return React.createElement(Col, {\n      lg: \"12\",\n      className: \"m-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Row, {\n      className: \"m-0 d-flex justify-content-\".concat(this.props.justify),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"p-0 mx-3 my-auto consumers-text \".concat(!this.props.title ? 'd-none' : ''),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, this.props.title), React.createElement(ScrollableHorizontal, {\n      contents: labels,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/home/mohammad/Desktop/Hesabeh/src/components/common/selection-labels/selection-labels.js"],"names":["React","Badge","Col","Row","ScrollableHorizontal","SelectionLabels","Component","constructor","props","state","selectedLabelsIDS","selectLabel","bind","deselectLabel","handleClickLabel","id","includes","isSelectedBefore","forEach","labelID","labels","push","setLabels","setState","filter","label","componentDidUpdate","prevProps","prevState","snapshot","selectedLabels","_labels","render","borderColor","background","color","r","g","b","a","isTextColorDark","name","justify","title"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {Badge, Col, Row} from \"reactstrap\";\nimport './selection-labels.css'\nimport ScrollableHorizontal from \"../../my-components/scrollable-horizontal/scrollable-horizontal\";\n\nexport default class SelectionLabels extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedLabelsIDS: [],\n    };\n    this.selectLabel = this.selectLabel.bind(this);\n    this.deselectLabel = this.deselectLabel.bind(this);\n    this.handleClickLabel = this.handleClickLabel.bind(this);\n  }\n\n  handleClickLabel(id) {\n    if (this.state.selectedLabelsIDS.includes(id))\n      this.deselectLabel(id);\n    else\n      this.selectLabel(id);\n  }\n\n  selectLabel(id) {\n    let isSelectedBefore = false;\n    if (this.state.selectedLabelsIDS) {\n      this.state.selectedLabelsIDS.forEach(labelID => {\n        if (labelID === id)\n          isSelectedBefore = true;\n      });\n      if (!isSelectedBefore) {\n        let labels = this.state.selectedLabelsIDS;\n        labels.push(id);\n        this.props.setLabels(labels);\n        this.setState({selectedLabelsIDS: labels});\n      }\n    }\n  }\n\n  deselectLabel(id) {\n    let labels = this.state.selectedLabelsIDS.filter(function (label) {\n      return label !== id;\n    });\n    this.props.setLabels(labels);\n    this.setState({selectedLabelsIDS: labels});\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if(this.props.selectedLabels !== prevProps.selectedLabels){\n      let _labels = [];\n      this.props.selectedLabels.forEach(label => {\n        _labels.push(label);\n      });\n      this.setState({selectedLabelsIDS: _labels});\n    }\n  }\n\n  render() {\n    let labels = [];\n    if (this.props.labels) {\n      this.props.labels.forEach(label => {\n        labels.push(\n          <Badge\n            style={this.state.selectedLabelsIDS.includes(label.id) ? {\n              borderColor: 'transparent',\n              background: `rgba(${label.color.r},${label.color.g},${label.color.b},${label.color.a})`,\n              color: `${label.isTextColorDark ? 'rgb(0,0,0,1)' : 'rgb(255,255,255,1)'}`\n            } : {}}\n            color=\"primary\"\n            className=\"selection-labels-label align-self-center\"\n            onClick={() => this.handleClickLabel(label.id)}\n          >\n            {label.name}\n          </Badge>\n        );\n      });\n    }\n    return (\n      <Col lg=\"12\" className=\"m-0\">\n        <Row className={`m-0 d-flex justify-content-${this.props.justify}`}>\n          <p className={`p-0 mx-3 my-auto consumers-text ${!this.props.title ? 'd-none' : ''}`}>\n            {this.props.title}\n          </p>\n          <ScrollableHorizontal contents={labels}/>\n          {/*{labels}*/}\n        </Row>\n      </Col>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}