{"ast":null,"code":"import { API_BASE_URL, POLL_LIST_SIZE, ACCESS_TOKEN } from \"../constants/constants\";\nimport { USERS } from '../constants/constants';\nexport function doesExistUser(emailOrUsernameOrPhoneNumber) {\n  let flag = false; // eslint-disable-next-line array-callback-return\n\n  USERS.map(u => {\n    if (u.username === emailOrUsernameOrPhoneNumber || u.email === emailOrUsernameOrPhoneNumber) {\n      flag = true;\n    }\n  });\n  return flag;\n}\nexport function isCorrectUser(emailOrUsernameOrPhoneNumber, password) {\n  let flag = false; // eslint-disable-next-line array-callback-return\n\n  USERS.map(u => {\n    if ((u.username === emailOrUsernameOrPhoneNumber || u.email === emailOrUsernameOrPhoneNumber) && u.password === password) {\n      flag = true;\n    }\n  });\n  return flag;\n}\n\nconst request = options => {\n  const headers = new Headers({\n    \"Content-Type\": \"application/json\"\n  });\n\n  if (localStorage.getItem(ACCESS_TOKEN)) {\n    headers.append(\"Authorization\", \"Bearer \" + localStorage.getItem(ACCESS_TOKEN));\n  }\n\n  const defaults = {\n    headers: headers\n  };\n  options = Object.assign({}, defaults, options);\n  return fetch(options.url, options).then(response => response.json().then(json => {\n    if (!response.ok) {\n      return Promise.reject(json);\n    }\n\n    return json;\n  }));\n};\n\nexport function login(loginRequest) {\n  return request({\n    url: API_BASE_URL + \"/auth/login\",\n    method: \"POST\",\n    body: JSON.stringify(loginRequest)\n  });\n}\nexport function resetPassword(resetPasswordRequest) {\n  return request({\n    url: API_BASE_URL + \"/auth/reset-password\",\n    method: \"POST\",\n    body: JSON.stringify(resetPasswordRequest)\n  });\n}\nexport function sendResetPasswordRequestLink(usernameOrEmail) {\n  return request({\n    url: API_BASE_URL + \"/auth/reset-password-request?usernameOrEmail=\" + usernameOrEmail,\n    method: \"POST\"\n  });\n}\nexport function register(registerRequest) {\n  return request({\n    url: API_BASE_URL + \"/auth/register\",\n    method: \"POST\",\n    body: JSON.stringify(registerRequest)\n  });\n}\nexport function editProfile(editProfileRequest) {\n  return request({\n    url: API_BASE_URL + \"/auth/edit-profile\",\n    method: \"POST\",\n    body: JSON.stringify(editProfileRequest)\n  });\n}\nexport function changePassword(changePasswordRequest) {\n  return request({\n    url: API_BASE_URL + \"/auth/change-password\",\n    method: \"POST\",\n    body: JSON.stringify(changePasswordRequest)\n  });\n}\nexport function confirmAccount(token) {\n  return request({\n    url: API_BASE_URL + \"/auth/confirm?token=\" + token,\n    method: \"POST\"\n  });\n}\nexport function checkUsernameAvailability(username) {\n  return request({\n    url: API_BASE_URL + \"/user/checkUsernameAvailability?username=\" + username,\n    method: \"GET\"\n  });\n}\nexport function checkEmailAvailability(email) {\n  return request({\n    url: API_BASE_URL + \"/user/checkEmailAvailability?email=\" + email,\n    method: \"GET\"\n  });\n}\nexport function getCurrentUser() {\n  if (!localStorage.getItem(ACCESS_TOKEN)) {\n    return Promise.reject(\"No access token set.\");\n  }\n\n  return request({\n    url: API_BASE_URL + \"/user/me\",\n    method: \"GET\"\n  });\n}","map":{"version":3,"sources":["/home/mohammad/Desktop/Hesabeh/src/utils/auditUtils.js"],"names":["API_BASE_URL","POLL_LIST_SIZE","ACCESS_TOKEN","USERS","doesExistUser","emailOrUsernameOrPhoneNumber","flag","map","u","username","email","isCorrectUser","password","request","options","headers","Headers","localStorage","getItem","append","defaults","Object","assign","fetch","url","then","response","json","ok","Promise","reject","login","loginRequest","method","body","JSON","stringify","resetPassword","resetPasswordRequest","sendResetPasswordRequestLink","usernameOrEmail","register","registerRequest","editProfile","editProfileRequest","changePassword","changePasswordRequest","confirmAccount","token","checkUsernameAvailability","checkEmailAvailability","getCurrentUser"],"mappings":"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","sourcesContent":["import { API_BASE_URL, POLL_LIST_SIZE, ACCESS_TOKEN } from \"../constants/constants\";\nimport {USERS} from '../constants/constants'\n\nexport function doesExistUser(emailOrUsernameOrPhoneNumber) {\n    let flag = false;\n  // eslint-disable-next-line array-callback-return\n    USERS.map((u) => {\n      if(u.username === emailOrUsernameOrPhoneNumber || u.email === emailOrUsernameOrPhoneNumber){\n        flag = true;\n      }\n    });\n    return flag;\n}\nexport function isCorrectUser(emailOrUsernameOrPhoneNumber, password){\n  let flag = false;\n  // eslint-disable-next-line array-callback-return\n  USERS.map((u) => {\n    if((u.username === emailOrUsernameOrPhoneNumber || u.email === emailOrUsernameOrPhoneNumber) &&\n  u.password === password){\n      flag = true;\n    }\n  });\n  return flag;\n}\n\n\n\n\n\nconst request = options => {\n  const headers = new Headers({\n    \"Content-Type\": \"application/json\"\n  });\n\n  if (localStorage.getItem(ACCESS_TOKEN)) {\n    headers.append(\n      \"Authorization\",\n      \"Bearer \" + localStorage.getItem(ACCESS_TOKEN)\n    );\n  }\n\n  const defaults = { headers: headers };\n  options = Object.assign({}, defaults, options);\n\n  return fetch(options.url, options).then(response =>\n    response.json().then(json => {\n      if (!response.ok) {\n        return Promise.reject(json);\n      }\n      return json;\n    })\n  );\n};\n\nexport function login(loginRequest) {\n  return request({\n    url: API_BASE_URL + \"/auth/login\",\n    method: \"POST\",\n    body: JSON.stringify(loginRequest)\n  });\n}\nexport function resetPassword(resetPasswordRequest) {\n  return request({\n    url: API_BASE_URL + \"/auth/reset-password\",\n    method: \"POST\",\n    body: JSON.stringify(resetPasswordRequest)\n  });\n}\nexport function sendResetPasswordRequestLink(usernameOrEmail) {\n  return request({\n    url: API_BASE_URL + \"/auth/reset-password-request?usernameOrEmail=\" + usernameOrEmail,\n    method: \"POST\",\n  });\n}\n\nexport function register(registerRequest) {\n  return request({\n    url: API_BASE_URL + \"/auth/register\",\n    method: \"POST\",\n    body: JSON.stringify(registerRequest)\n  });\n}\n\nexport function editProfile(editProfileRequest) {\n  return request({\n    url: API_BASE_URL + \"/auth/edit-profile\",\n    method: \"POST\",\n    body: JSON.stringify(editProfileRequest)\n  });\n}\n\nexport function changePassword(changePasswordRequest) {\n  return request({\n    url: API_BASE_URL + \"/auth/change-password\",\n    method: \"POST\",\n    body: JSON.stringify(changePasswordRequest)\n  });\n}\n\nexport function confirmAccount(token) {\n  return request({\n    url: API_BASE_URL + \"/auth/confirm?token=\" + token,\n    method: \"POST\"\n  });\n}\n\nexport function checkUsernameAvailability(username) {\n  return request({\n    url: API_BASE_URL + \"/user/checkUsernameAvailability?username=\" + username,\n    method: \"GET\"\n  });\n}\n\nexport function checkEmailAvailability(email) {\n  return request({\n    url: API_BASE_URL + \"/user/checkEmailAvailability?email=\" + email,\n    method: \"GET\"\n  });\n}\n\nexport function getCurrentUser() {\n  if (!localStorage.getItem(ACCESS_TOKEN)) {\n    return Promise.reject(\"No access token set.\");\n  }\n\n  return request({\n    url: API_BASE_URL + \"/user/me\",\n    method: \"GET\"\n  });\n}\n"]},"metadata":{},"sourceType":"module"}