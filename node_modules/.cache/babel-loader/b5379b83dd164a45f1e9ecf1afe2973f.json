{"ast":null,"code":"var _jsxFileName = \"/home/mohammad/Desktop/hesabeh/src/components/common/input-auto-suggestion/input-auto-suggestion.js\";\nconst people = [{\n  first: 'Charlie',\n  last: 'Brown',\n  twitter: 'dancounsell'\n}, {\n  first: 'Charlotte',\n  last: 'White',\n  twitter: 'mtnmissy'\n}, {\n  first: 'Chloe',\n  last: 'Jones',\n  twitter: 'ladylexy'\n}, {\n  first: 'Cooper',\n  last: 'King',\n  twitter: 'steveodom'\n}]; // https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Special_Characters\n\nfunction escapeRegexCharacters(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nfunction getSuggestions(value) {\n  const escapedValue = escapeRegexCharacters(value.trim());\n\n  if (escapedValue === '') {\n    return [];\n  }\n\n  const regex = new RegExp('\\\\b' + escapedValue, 'i');\n  return people.filter(person => regex.test(getSuggestionValue(person)));\n}\n\nfunction getSuggestionValue(suggestion) {\n  return \"\".concat(suggestion.first, \" \").concat(suggestion.last);\n}\n\nfunction renderSuggestion(suggestion, {\n  query\n}) {\n  const suggestionText = \"\".concat(suggestion.first, \" \").concat(suggestion.last);\n  const matches = AutosuggestHighlightMatch(suggestionText, query);\n  const parts = AutosuggestHighlightParse(suggestionText, matches);\n  return React.createElement(\"span\", {\n    className: 'suggestion-content ' + suggestion.twitter,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, parts.map((part, index) => {\n    const className = part.highlight ? 'highlight' : null;\n    return React.createElement(\"span\", {\n      className: className,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, part.text);\n  })));\n}\n\nclass InputAutoSuggestion extends React.Component {\n  constructor() {\n    super();\n\n    this.onChange = (event, {\n      newValue,\n      method\n    }) => {\n      this.setState({\n        value: newValue\n      });\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: getSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          value = _this$state.value,\n          suggestions = _this$state.suggestions;\n    const inputProps = {\n      placeholder: \"Type 'c'\",\n      value,\n      onChange: this.onChange\n    };\n    return React.createElement(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default InputAutoSuggestion; // ReactDOM.render(<App />, document.getElementById('app'));","map":{"version":3,"sources":["/home/mohammad/Desktop/hesabeh/src/components/common/input-auto-suggestion/input-auto-suggestion.js"],"names":["people","first","last","twitter","escapeRegexCharacters","str","replace","getSuggestions","value","escapedValue","trim","regex","RegExp","filter","person","test","getSuggestionValue","suggestion","renderSuggestion","query","suggestionText","matches","AutosuggestHighlightMatch","parts","AutosuggestHighlightParse","map","part","index","className","highlight","text","InputAutoSuggestion","React","Component","constructor","onChange","event","newValue","method","setState","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","state","render","inputProps","placeholder"],"mappings":"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","sourcesContent":["const people = [\n  {\n    first: 'Charlie',\n    last: 'Brown',\n    twitter: 'dancounsell'\n  },\n  {\n    first: 'Charlotte',\n    last: 'White',\n    twitter: 'mtnmissy'\n  },\n  {\n    first: 'Chloe',\n    last: 'Jones',\n    twitter: 'ladylexy'\n  },\n  {\n    first: 'Cooper',\n    last: 'King',\n    twitter: 'steveodom'\n  }\n];\n\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Special_Characters\nfunction escapeRegexCharacters(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nfunction getSuggestions(value) {\n  const escapedValue = escapeRegexCharacters(value.trim());\n\n  if (escapedValue === '') {\n    return [];\n  }\n\n  const regex = new RegExp('\\\\b' + escapedValue, 'i');\n\n  return people.filter(person => regex.test(getSuggestionValue(person)));\n}\n\nfunction getSuggestionValue(suggestion) {\n  return `${suggestion.first} ${suggestion.last}`;\n}\n\nfunction renderSuggestion(suggestion, { query }) {\n  const suggestionText = `${suggestion.first} ${suggestion.last}`;\n  const matches = AutosuggestHighlightMatch(suggestionText, query);\n  const parts = AutosuggestHighlightParse(suggestionText, matches);\n\n  return (\n    <span className={'suggestion-content ' + suggestion.twitter}>\n      <span className=\"name\">\n        {\n          parts.map((part, index) => {\n            const className = part.highlight ? 'highlight' : null;\n\n            return (\n              <span className={className} key={index}>{part.text}</span>\n            );\n          })\n        }\n      </span>\n    </span>\n  );\n}\n\nclass InputAutoSuggestion extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      value: '',\n      suggestions: []\n    };\n  }\n\n  onChange = (event, { newValue, method }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  };\n\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n    const inputProps = {\n      placeholder: \"Type 'c'\",\n      value,\n      onChange: this.onChange\n    };\n\n    return (\n      <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        inputProps={inputProps} />\n    );\n  }\n}\n\nexport default InputAutoSuggestion;\n\n// ReactDOM.render(<App />, document.getElementById('app'));\n"]},"metadata":{},"sourceType":"module"}