"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Calendar = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _utils = require("./shared/utils");

var _constants = require("./shared/constants");

var _components = require("./components");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var Calendar = function Calendar(_ref) {
  var selectedDay = _ref.selectedDay,
      selectedDayRange = _ref.selectedDayRange,
      onChange = _ref.onChange,
      onDisabledDayError = _ref.onDisabledDayError,
      isDayRange = _ref.isDayRange,
      calendarClassName = _ref.calendarClassName,
      calendarTodayClassName = _ref.calendarTodayClassName,
      calendarSelectedDayClassName = _ref.calendarSelectedDayClassName,
      calendarRangeStartClassName = _ref.calendarRangeStartClassName,
      calendarRangeBetweenClassName = _ref.calendarRangeBetweenClassName,
      calendarRangeEndClassName = _ref.calendarRangeEndClassName,
      disabledDays = _ref.disabledDays,
      colorPrimary = _ref.colorPrimary,
      colorPrimaryLight = _ref.colorPrimaryLight,
      minimumDate = _ref.minimumDate,
      maximumDate = _ref.maximumDate,
      selectorStartingYear = _ref.selectorStartingYear,
      selectorEndingYear = _ref.selectorEndingYear;
  var calendarElement = (0, _react.useRef)(null);
  var today = (0, _react.useRef)((0, _utils.getToday)());

  var _useState = (0, _react.useState)({
    activeDate: null,
    monthChangeDirection: '',
    isMonthSelectorOpen: false,
    isYearSelectorOpen: false
  }),
      _useState2 = _slicedToArray(_useState, 2),
      mainState = _useState2[0],
      setMainState = _useState2[1];

  var createStateToggler = function createStateToggler(property) {
    return function () {
      setMainState(_objectSpread({}, mainState, _defineProperty({}, property, !mainState[property])));
    };
  };

  var toggleMonthSelector = createStateToggler('isMonthSelectorOpen');
  var toggleYearSelector = createStateToggler('isYearSelectorOpen');

  var getComputedActiveDate = function getComputedActiveDate() {
    if (selectedDay) return (0, _utils.shallowCloneObject)(selectedDay);
    if (selectedDayRange.from) return (0, _utils.shallowCloneObject)(selectedDayRange.from);
    return (0, _utils.shallowCloneObject)(today.current);
  };

  var activeDate = mainState.activeDate ? (0, _utils.shallowCloneObject)(mainState.activeDate) : getComputedActiveDate();

  var renderWeekDays = function renderWeekDays() {
    return Object.keys(_constants.WEEK_DAYS).map(function (key) {
      return _react["default"].createElement("span", {
        key: key,
        className: "Calendar__weekDay"
      }, _constants.WEEK_DAYS[key][0]);
    });
  };

  var handleMonthChange = function handleMonthChange(direction) {
    setMainState(_objectSpread({}, mainState, {
      monthChangeDirection: direction
    }));
  };

  var updateDate = function updateDate() {
    setMainState({
      activeDate: (0, _utils.getDateAccordingToMonth)(activeDate, mainState.monthChangeDirection),
      monthChangeDirection: ''
    });
  };

  var selectMonth = function selectMonth(newMonthNumber) {
    setMainState(_objectSpread({}, mainState, {
      activeDate: _objectSpread({}, activeDate, {
        month: newMonthNumber
      }),
      isMonthSelectorOpen: false
    }));
  };

  var selectYear = function selectYear(year) {
    setMainState(_objectSpread({}, mainState, {
      activeDate: _objectSpread({}, activeDate, {
        year: year
      }),
      isYearSelectorOpen: false
    }));
  };

  return _react["default"].createElement("div", {
    className: "Calendar ".concat(calendarClassName),
    style: {
      '--cl-color-primary': colorPrimary,
      '--cl-color-primary-light': colorPrimaryLight
    },
    ref: calendarElement
  }, _react["default"].createElement(_components.Header, {
    maximumDate: maximumDate,
    minimumDate: minimumDate,
    activeDate: activeDate,
    onMonthChange: handleMonthChange,
    onMonthSelect: toggleMonthSelector,
    onYearSelect: toggleYearSelector,
    monthChangeDirection: mainState.monthChangeDirection,
    isMonthSelectorOpen: mainState.isMonthSelectorOpen,
    isYearSelectorOpen: mainState.isYearSelectorOpen
  }), _react["default"].createElement(_components.MonthSelector, {
    isOpen: mainState.isMonthSelectorOpen,
    activeDate: activeDate,
    onMonthSelect: selectMonth,
    maximumDate: maximumDate,
    minimumDate: minimumDate
  }), _react["default"].createElement(_components.YearSelector, {
    isOpen: mainState.isYearSelectorOpen,
    activeDate: activeDate,
    onYearSelect: selectYear,
    startingYear: selectorStartingYear,
    endingYear: selectorEndingYear,
    maximumDate: maximumDate,
    minimumDate: minimumDate
  }), _react["default"].createElement("div", {
    className: "Calendar__weekDays"
  }, renderWeekDays()), _react["default"].createElement(_components.DaysList, {
    activeDate: activeDate,
    monthChangeDirection: mainState.monthChangeDirection,
    onSlideChange: updateDate,
    isDayRange: isDayRange,
    selectedDayRange: selectedDayRange,
    disabledDays: disabledDays,
    onDisabledDayError: onDisabledDayError,
    selectedDay: selectedDay,
    minimumDate: minimumDate,
    maximumDate: maximumDate,
    onChange: onChange,
    calendarTodayClassName: calendarTodayClassName,
    calendarSelectedDayClassName: calendarSelectedDayClassName,
    calendarRangeStartClassName: calendarRangeStartClassName,
    calendarRangeEndClassName: calendarRangeEndClassName,
    calendarRangeBetweenClassName: calendarRangeBetweenClassName
  }));
};

exports.Calendar = Calendar;
Calendar.defaultProps = {
  selectedDay: null,
  selectedDayRange: {
    from: null,
    to: null
  },
  minimumDate: null,
  maximumDate: null,
  colorPrimary: '#0eca2d',
  colorPrimaryLight: '#cff4d5',
  calendarClassName: ''
};
Calendar.propTypes = {
  selectedDay: _propTypes["default"].shape(_constants.DAY_SHAPE),
  selectedDayRange: _propTypes["default"].shape({
    from: _propTypes["default"].shape(_constants.DAY_SHAPE),
    to: _propTypes["default"].shape(_constants.DAY_SHAPE)
  }),
  calendarClassName: _propTypes["default"].string,
  colorPrimary: _propTypes["default"].string,
  colorPrimaryLight: _propTypes["default"].string,
  minimumDate: _propTypes["default"].shape(_constants.DAY_SHAPE),
  maximumDate: _propTypes["default"].shape(_constants.DAY_SHAPE)
};