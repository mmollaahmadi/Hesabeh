"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _utils = require("../shared/utils");

var _constants = require("../shared/constants");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var MonthSelector = function MonthSelector(_ref) {
  var activeDate = _ref.activeDate,
      maximumDate = _ref.maximumDate,
      minimumDate = _ref.minimumDate,
      onMonthSelect = _ref.onMonthSelect,
      isOpen = _ref.isOpen;
  var monthSelector = (0, _react.useRef)(null);
  (0, _react.useEffect)(function () {
    var classToggleMethod = isOpen ? 'add' : 'remove';
    monthSelector.current.classList[classToggleMethod]('-open');
  }, [isOpen]);

  var renderMonthSelectorItems = function renderMonthSelectorItems() {
    return _constants.PERSIAN_MONTHS.map(function (persianMonth) {
      var monthNumber = (0, _utils.getMonthNumber)(persianMonth);
      var monthDate = {
        day: 1,
        month: monthNumber,
        year: activeDate.year
      };
      var isAfterMaximumDate = maximumDate && (0, _utils.isBeforeDate)(maximumDate, _objectSpread({}, monthDate, {
        month: monthNumber
      }));
      var isBeforeMinimumDate = minimumDate && ((0, _utils.isBeforeDate)(_objectSpread({}, monthDate, {
        month: monthNumber + 1
      }), minimumDate) || (0, _utils.isSameDay)(_objectSpread({}, monthDate, {
        month: monthNumber + 1
      }), minimumDate));
      return _react["default"].createElement("div", {
        key: persianMonth,
        className: "Calendar__monthSelectorItem"
      }, _react["default"].createElement("button", {
        tabIndex: "-1",
        onClick: function onClick() {
          onMonthSelect(monthNumber);
        },
        className: "Calendar__monthSelectorItemText ".concat(monthNumber === activeDate.month ? '-active' : ''),
        type: "button",
        disabled: isAfterMaximumDate || isBeforeMinimumDate
      }, persianMonth));
    });
  };

  return _react["default"].createElement("div", {
    className: "Calendar__monthSelectorAnimationWrapper"
  }, _react["default"].createElement("div", {
    className: "Calendar__monthSelectorWrapper"
  }, _react["default"].createElement("div", {
    ref: monthSelector,
    className: "Calendar__monthSelector"
  }, renderMonthSelectorItems())));
};

var _default = MonthSelector;
exports["default"] = _default;