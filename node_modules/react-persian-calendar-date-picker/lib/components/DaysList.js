"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _sliderHelpers = require("../shared/sliderHelpers");

var _utils = require("../shared/utils");

var _constants = require("../shared/constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DaysList = function DaysList(_ref) {
  var activeDate = _ref.activeDate,
      monthChangeDirection = _ref.monthChangeDirection,
      onSlideChange = _ref.onSlideChange,
      isDayRange = _ref.isDayRange,
      selectedDayRange = _ref.selectedDayRange,
      disabledDays = _ref.disabledDays,
      onDisabledDayError = _ref.onDisabledDayError,
      selectedDay = _ref.selectedDay,
      minimumDate = _ref.minimumDate,
      maximumDate = _ref.maximumDate,
      onChange = _ref.onChange,
      calendarTodayClassName = _ref.calendarTodayClassName,
      calendarSelectedDayClassName = _ref.calendarSelectedDayClassName,
      calendarRangeStartClassName = _ref.calendarRangeStartClassName,
      calendarRangeEndClassName = _ref.calendarRangeEndClassName,
      calendarRangeBetweenClassName = _ref.calendarRangeBetweenClassName;
  var calendarSectionWrapper = (0, _react.useRef)(null);
  var today = (0, _react.useRef)((0, _utils.getToday)());
  (0, _react.useEffect)(function () {
    if (!monthChangeDirection) return;
    (0, _sliderHelpers.animateContent)({
      direction: monthChangeDirection,
      parent: calendarSectionWrapper.current
    });
  }, [monthChangeDirection]);

  var getDayRangeValue = function getDayRangeValue(day) {
    var clonedDayRange = (0, _utils.deepCloneObject)(selectedDayRange);
    var dayRangeValue = clonedDayRange.from && clonedDayRange.to ? {
      from: null,
      to: null
    } : clonedDayRange;
    var dayRangeProp = !dayRangeValue.from ? 'from' : 'to';
    dayRangeValue[dayRangeProp] = day;
    var from = dayRangeValue.from,
        to = dayRangeValue.to; // swap from and to values if from is later than to

    if ((0, _utils.isBeforeDate)(dayRangeValue.to, dayRangeValue.from)) {
      dayRangeValue.from = to;
      dayRangeValue.to = from;
    }

    var checkIncludingDisabledDay = function checkIncludingDisabledDay(disabledDay) {
      return (0, _utils.checkDayInDayRange)({
        day: disabledDay,
        from: dayRangeValue.from,
        to: dayRangeValue.to
      });
    };

    var includingDisabledDay = disabledDays.find(checkIncludingDisabledDay);

    if (includingDisabledDay) {
      onDisabledDayError(includingDisabledDay);
      return selectedDayRange;
    }

    return dayRangeValue;
  };

  var handleDayClick = function handleDayClick(day) {
    var newDayValue = isDayRange ? getDayRangeValue(day) : day;
    onChange(newDayValue);
  };

  var getDayClassNames = function getDayClassNames(dayItem) {
    var isToday = (0, _utils.isSameDay)(dayItem, today.current);
    var isSelected = selectedDay ? (0, _utils.isSameDay)(dayItem, selectedDay) : false;
    var startingDay = selectedDayRange.from,
        endingDay = selectedDayRange.to;
    var isStartedDayRange = (0, _utils.isSameDay)(dayItem, startingDay);
    var isEndingDayRange = (0, _utils.isSameDay)(dayItem, endingDay);
    var isWithinRange = (0, _utils.checkDayInDayRange)({
      day: dayItem,
      from: startingDay,
      to: endingDay
    });
    var classNames = ''.concat(isToday && !isSelected ? " -today ".concat(calendarTodayClassName) : '').concat(!dayItem.isStandard ? ' -blank' : '').concat(isSelected ? " -selected ".concat(calendarSelectedDayClassName) : '').concat(isStartedDayRange ? " -selectedStart ".concat(calendarRangeStartClassName) : '').concat(isEndingDayRange ? " -selectedEnd ".concat(calendarRangeEndClassName) : '').concat(isWithinRange ? " -selectedBetween ".concat(calendarRangeBetweenClassName) : '').concat(dayItem.isDisabled ? '-disabled' : '');
    return classNames;
  };

  var getViewMonthDays = function getViewMonthDays(date) {
    var prependingBlankDays = (0, _utils.createUniqueRange)((0, _utils.getMonthFirstWeekday)(date), 'starting-blank'); // all months will have an additional 7 days(week) for rendering purpose

    var appendingBlankDays = (0, _utils.createUniqueRange)(7 - (0, _utils.getMonthFirstWeekday)(date), 'ending-blank');
    var standardDays = (0, _utils.createUniqueRange)((0, _utils.getMonthLength)(date)).map(function (day) {
      return _objectSpread({}, day, {
        isStandard: true,
        month: date.month,
        year: date.year
      });
    }, 'standard');
    var allDays = prependingBlankDays.concat(standardDays, appendingBlankDays);
    return allDays;
  };

  var renderMonthDays = function renderMonthDays(isInitialActiveChild) {
    var date = (0, _sliderHelpers.getSlideDate)({
      activeDate: activeDate,
      isInitialActiveChild: isInitialActiveChild,
      monthChangeDirection: monthChangeDirection,
      parent: calendarSectionWrapper.current
    });
    var allDays = getViewMonthDays(date);
    return allDays.map(function (_ref2) {
      var id = _ref2.id,
          day = _ref2.value,
          month = _ref2.month,
          year = _ref2.year,
          isStandard = _ref2.isStandard;
      var dayItem = {
        day: day,
        month: month,
        year: year
      };
      var isInDisabledDaysRange = disabledDays.some(function (disabledDay) {
        return (0, _utils.isSameDay)(dayItem, disabledDay);
      });
      var isBeforeMinimumDate = (0, _utils.isBeforeDate)(dayItem, minimumDate);
      var isAfterMaximumDate = (0, _utils.isBeforeDate)(maximumDate, dayItem);
      var isNotInValidRange = isStandard && (isBeforeMinimumDate || isAfterMaximumDate);
      var isDisabled = isInDisabledDaysRange || isNotInValidRange;
      var additionalClass = getDayClassNames(_objectSpread({}, dayItem, {
        isStandard: isStandard,
        isDisabled: isDisabled
      }));
      return _react["default"].createElement("button", {
        tabIndex: "-1",
        key: id,
        className: "Calendar__day ".concat(additionalClass),
        onClick: function onClick() {
          if (isDisabled) {
            onDisabledDayError(dayItem); // good for showing error messages

            return;
          }

          handleDayClick({
            day: day,
            month: month,
            year: year
          });
        },
        disabled: !isStandard,
        type: "button"
      }, (0, _utils.toPersianNumber)(day));
    });
  };

  return _react["default"].createElement("div", {
    ref: calendarSectionWrapper,
    className: "Calendar__sectionWrapper"
  }, _react["default"].createElement("div", {
    onAnimationEnd: function onAnimationEnd(e) {
      (0, _sliderHelpers.handleSlideAnimationEnd)(e);
      onSlideChange();
    },
    className: "Calendar__section -shown"
  }, renderMonthDays(true)), _react["default"].createElement("div", {
    onAnimationEnd: function onAnimationEnd(e) {
      (0, _sliderHelpers.handleSlideAnimationEnd)(e);
      onSlideChange();
    },
    className: "Calendar__section -hiddenNext"
  }, renderMonthDays(false)));
};

DaysList.propTypes = {
  onChange: _propTypes["default"].func,
  onDisabledDayError: _propTypes["default"].func,
  disabledDays: _propTypes["default"].arrayOf(_propTypes["default"].shape(_constants.DAY_SHAPE)),
  calendarTodayClassName: _propTypes["default"].string,
  calendarSelectedDayClassName: _propTypes["default"].string,
  calendarRangeStartClassName: _propTypes["default"].string,
  calendarRangeBetweenClassName: _propTypes["default"].string,
  calendarRangeEndClassName: _propTypes["default"].string
};
DaysList.defaultProps = {
  onChange: function onChange() {},
  onDisabledDayError: function onDisabledDayError() {},
  disabledDays: [],
  calendarTodayClassName: '',
  calendarSelectedDayClassName: '',
  calendarRangeStartClassName: '',
  calendarRangeBetweenClassName: '',
  calendarRangeEndClassName: ''
};
var _default = DaysList;
exports["default"] = _default;