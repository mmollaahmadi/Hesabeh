{
  "_from": "react-router-hash-link",
  "_id": "react-router-hash-link@1.2.2",
  "_inBundle": false,
  "_integrity": "sha512-LBthLVHdqPeKDVt3+cFRhy15Z7veikOvdKRZRfyBR2vjqIE7rxn+tKLjb6DOmLm6JpoQVemVDnxQ35RVnEHdQA==",
  "_location": "/react-router-hash-link",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "react-router-hash-link",
    "fetchSpec": "latest",
    "name": "react-router-hash-link",
    "raw": "react-router-hash-link",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-router-hash-link/-/react-router-hash-link-1.2.2.tgz",
  "_shasum": "7a0ad5e925d49596d19554de8bc6c554ce4f8099",
  "_shrinkwrap": null,
  "_spec": "react-router-hash-link",
  "_where": "/home/mohammad/Desktop/hesabeh",
  "author": {
    "email": "code@rafrex.com",
    "name": "Rafael Pedicini"
  },
  "bugs": {
    "url": "https://github.com/rafrex/react-router-hash-link/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "prop-types": "^15.6.0"
  },
  "deprecated": false,
  "description": "Hash link scroll functionality for React Router v4/5",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-plugin-transform-object-rest-spread": "^6.26.0",
    "babel-preset-env": "^1.6.1",
    "babel-preset-react": "^6.24.1"
  },
  "files": [
    "lib",
    "src"
  ],
  "homepage": "https://github.com/rafrex/react-router-hash-link#readme",
  "keywords": [
    "hash-link",
    "link",
    "react",
    "react-router",
    "scroll"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "react-router-hash-link",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": ">=15",
    "react-router-dom": ">=4"
  },
  "readme": "# React Router Hash Link\n\n***Note that this is for React Router v4/5, for v2/3 see [this solution](https://github.com/rafrex/react-router-hash-link/tree/react-router-v2/3).***\n\n[Live Example](http://react-router-hash-link.rafrex.com/)\n\nThis is a solution to [React Router's issue of not scrolling to `#hash-fragments`](https://github.com/reactjs/react-router/issues/394#issuecomment-220221604) when using the `<Link>` component to navigate.\n\nWhen you click on a link created with `react-router-hash-link` it will scroll to the element on the page with the `id` that matches the `#hash-fragment` in the link. This will also work for elements that are created after an asynchronous data load. Note that you must use React Router's `BrowserRouter` for this to work.\n\n```shell\n$ yarn add react-router-hash-link\n# OR\n$ npm install --save react-router-hash-link\n```\n\n### `<HashLink>`\n```javascript\n// In YourComponent.js\n...\nimport { HashLink as Link } from 'react-router-hash-link';\n...\n// Use it just like a RRv4/5 <Link> (to can be a string or an object, see RRv4/5 api for details):\n<Link to=\"/some/path#with-hash-fragment\">Link to Hash Fragment</Link>\n```\n\n\n### `<NavHashLink>`\n```javascript\n// In YourComponent.js\n...\nimport { NavHashLink as NavLink } from 'react-router-hash-link';\n...\n// Use it just like a RRv4/5 <NavLink> (see RRv4/5 api for details):\n<NavLink\n  to=\"/some/path#with-hash-fragment\"\n  activeClassName=\"selected\"\n  // etc...\n>Link to Hash Fragment</NavLink>\n```\n\n## Scrolling API\n### `smooth: boolean`\n- Smooth scroll to the element\n- React Router Hash Link uses the native Element method `element.scrollIntoView()` for scrolling, and when the `smooth` prop is present it will call it with the smooth option, `element.scrollIntoView({ behavior: 'smooth' })`\n- Note that not all browsers have implemented options for `scrollIntoView` - see [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView) and [Can I Use](https://caniuse.com/#feat=scrollintoview) - there is also a browser [polyfill for smooth scrolling](https://github.com/iamdustan/smoothscroll) which you can install separately so `smooth` will work in all browsers\n```js\nimport { HashLink as Link } from 'react-router-hash-link';\n<Link smooth to=\"/path#hash\">Link to Hash Fragment</Link>\n```\n\n### `scroll: function`\n- Custom scroll function called with the element to scroll to, e.g. `const myScrollFn = element => {...}`\n- This allows you to do things like scroll with offset, use a specific smooth scrolling library, or pass in your own options to `scrollIntoView`\n```js\nimport { HashLink as Link } from 'react-router-hash-link';\n<Link\n    to=\"/path#hash\"\n    scroll={el => el.scrollIntoView({ behavior: 'instant', block: 'end' })}\n>Link to Hash Fragment</Link>\n```\n\n### Custom `Link`\n\nThe exported components are wrapped versions of the `Link` and `NavLink` exports of react-router-dom. In some cases you may need to provide a custom `Link` implementation.\n\nFor example, the gatsby static site generator requires you to use its implementation of `Link`. You can wrap it with the `genericHashLink` function of this package.\n\n```jsx\nimport { genericHashLink } from 'react-router-hash-link';\nimport GatsbyLink from 'gatsby-link';\n\nconst MyHashLink = (props) => genericHashLink(props, GatsbyLink);\n\nconst MyComponent = () => (\n  <div>\n    The default wont work for you?\n    <MyHashLink to=\"/faq#how-to-use-custom-link\">No problem!</MyHashLink>\n  </div>\n);\n```\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/rafrex/react-router-hash-link.git"
  },
  "scripts": {
    "build": "rm -rf lib && babel src -d lib --presets=env,react --plugins=transform-object-rest-spread",
    "dev": "yarn link && babel src -d lib --watch --presets=env,react --plugins=transform-object-rest-spread",
    "prepublish": "yarn build"
  },
  "version": "1.2.2"
}
